{"ast":null,"code":"import { NgxCxlPopoverContainerComponent } from './ngx-cxl-popover-container/ngx-cxl-popover-container.component';\nimport * as i0 from \"@angular/core\";\nexport let NgxCxlPopoverDirective = /*#__PURE__*/(() => {\n  class NgxCxlPopoverDirective {\n    constructor(elementRef, viewContainerRef, componentFactoryResolver) {\n      this.elementRef = elementRef;\n      this.viewContainerRef = viewContainerRef;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.enableScroll = true;\n      this.scrollSpeed = 10;\n      this._documentBodyOverflowY = document.body.style.overflowY;\n      this.width = null;\n      this.height = null;\n      this._isPopupCreated = false;\n      this._additionalDistance = 20;\n      this.placementHorizontal = null;\n      this.placementVertical = null;\n      this.titleTemplate = null;\n      this.contentTemplate = null;\n      this.popoverTitle = '';\n      this.popoverContent = '';\n      this._popoverComponentRef = null;\n      this._popoverComponentFactory = this.componentFactoryResolver.resolveComponentFactory(NgxCxlPopoverContainerComponent);\n    }\n\n    ngOnInit() {}\n\n    handleScroll(e) {\n      if (!this._popoverComponentRef || !this._isPopupCreated || !this.enableScroll) return;\n      const DeltaY = e.deltaY * (this.scrollSpeed / 100);\n\n      this._popoverComponentRef.instance.scroll({\n        behavior: 'auto',\n        top: DeltaY\n      });\n    }\n\n    handleOnMouseMoving(e) {\n      this.updatePosition(e.clientX, e.clientY);\n    }\n\n    handleOnMouseEnter(e) {\n      if (this._isPopupCreated) return;\n      this.createPopup(e.clientX, e.clientY);\n      this.updatePosition(e.clientX, e.clientY);\n\n      if (this.enableScroll) {\n        this.disableBodyScroll();\n      }\n    }\n\n    handleOnMouseLeave(e) {\n      if (!this._isPopupCreated) return;\n      this.destroyPopup();\n\n      if (this.enableScroll) {\n        this.enableBodyScroll();\n      }\n    }\n\n    updatePosition(mouseX, mouseY) {\n      if (this.isCanBeOnTheRight(mouseX) || this.placementHorizontal === 'right') {\n        this.displayOnTheRight(mouseX);\n      } else {\n        this.displayOnTheLeft(mouseX);\n      }\n\n      if (this.isCanBeOnTheTop(mouseY) || this.placementVertical === 'top') {\n        this.displayOnTheTop(mouseY);\n      }\n    }\n\n    createPopup(mouseX, mouseY) {\n      this.createComponent();\n      this.setFixedPositionOnPopover();\n      this._isPopupCreated = true;\n    }\n\n    createComponent() {\n      this._popoverComponentRef = this.viewContainerRef.createComponent(this._popoverComponentFactory);\n      this._popoverComponentRef.instance.title = this.popoverTitle;\n      this._popoverComponentRef.instance.content = this.popoverContent;\n      this._popoverComponentRef.instance.titleTemplate = this.titleTemplate;\n      this._popoverComponentRef.instance.contentTemplate = this.contentTemplate;\n    }\n\n    setFixedPositionOnPopover() {\n      if (!this._popoverComponentRef) return;\n      const nativeElement = this._popoverComponentRef.location.nativeElement;\n      nativeElement.style.position = 'fixed';\n      nativeElement.style.zIndex = '10000';\n    }\n\n    displayOnTheLeft(startX) {\n      if (!this._popoverComponentRef) return;\n      const nativeElement = this._popoverComponentRef.location.nativeElement;\n      const offsetRight = startX - nativeElement.offsetWidth;\n      nativeElement.style.left = `${offsetRight + this._additionalDistance}px`;\n    }\n\n    displayOnTheRight(startX) {\n      if (!this._popoverComponentRef) return;\n      const nativeElement = this._popoverComponentRef.location.nativeElement;\n      nativeElement.style.left = `${startX + this._additionalDistance}px`;\n    }\n\n    displayOnTheTop(startX) {\n      if (!this._popoverComponentRef) return;\n      const nativeElement = this._popoverComponentRef.location.nativeElement;\n      nativeElement.style.top = `${startX - nativeElement.offsetHeight - this._additionalDistance}px`;\n    }\n\n    disableBodyScroll() {\n      document.body.style.overflowY = 'hidden';\n    }\n\n    enableBodyScroll() {\n      document.body.style.overflowY = this._documentBodyOverflowY;\n    }\n\n    destroyPopup() {\n      if (!this._popoverComponentRef) return;\n\n      this._popoverComponentRef.destroy();\n\n      this._popoverComponentRef = null;\n      this._isPopupCreated = false;\n    }\n\n    isCanBeOnTheRight(mouseX) {\n      if (!this._popoverComponentRef) return;\n      const nativeElement = this._popoverComponentRef.location.nativeElement;\n      const availableDistance = window.screen.availWidth - mouseX;\n      const elementWidth = nativeElement.offsetWidth + this._additionalDistance;\n      return availableDistance >= elementWidth;\n    }\n\n    isCanBeOnTheTop(mouseY) {\n      if (!this._popoverComponentRef) return;\n      const nativeElement = this._popoverComponentRef.location.nativeElement;\n      const availableDistance = mouseY;\n      return availableDistance >= nativeElement.offsetHeight + this._additionalDistance;\n    }\n\n  }\n\n  NgxCxlPopoverDirective.ɵfac = function NgxCxlPopoverDirective_Factory(t) {\n    return new (t || NgxCxlPopoverDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n  };\n\n  NgxCxlPopoverDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: NgxCxlPopoverDirective,\n    selectors: [[\"\", \"NgxCxlPopover\", \"\"]],\n    hostBindings: function NgxCxlPopoverDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"wheel\", function NgxCxlPopoverDirective_wheel_HostBindingHandler($event) {\n          return ctx.handleScroll($event);\n        })(\"mousemove\", function NgxCxlPopoverDirective_mousemove_HostBindingHandler($event) {\n          return ctx.handleOnMouseMoving($event);\n        })(\"mouseenter\", function NgxCxlPopoverDirective_mouseenter_HostBindingHandler($event) {\n          return ctx.handleOnMouseEnter($event);\n        })(\"mouseleave\", function NgxCxlPopoverDirective_mouseleave_HostBindingHandler($event) {\n          return ctx.handleOnMouseLeave($event);\n        });\n      }\n    },\n    inputs: {\n      enableScroll: \"enableScroll\",\n      scrollSpeed: \"scrollSpeed\",\n      width: \"width\",\n      height: \"height\",\n      popoverTitle: \"popoverTitle\",\n      popoverContent: \"popoverContent\",\n      titleTemplate: \"titleTemplate\",\n      contentTemplate: \"contentTemplate\",\n      placementHorizontal: \"placementHorizontal\",\n      placementVertical: \"placementVertical\"\n    }\n  });\n  return NgxCxlPopoverDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}